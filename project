<!-- This is going to be a simple project where we are going to set up apache2  in three slave/agent in three different servers using Ansible -->

<!-- My name is Rubben, and am going to be your intructor on this project. So let begin -->

<!-- ANSIBLE PROJECT

WHAT IS ANSIBLE?
    Ansible is a opensource automation tool that can be use to provision infrastructure on one or more computer systems but in the cloud and on-prem, some of the task we can do with ansible include configuration management, application deployment, infracture set up etc..

SETTING UP THE CONTROLLER:
    Ansible Controller is the machine or server where we set up ansible to run ansible command and playbooks, this is where manage configuration and deployment of application to other hosts.
    The controller can be any machine that meet the requirment for uning ansible such as a laptop, a desktop, a virtue machine or cloud-base instance(EC2)
    On this controller, we are ging to create Two files ANSIBLE INVENTORY AND ANSIBLE PLAYBOOK.

    INVENTORY:
        This is the file where we will keep the information about our servers(hosts) in a structural manner like the ip addresses, their domain name, how we are going to connect to them etc. And we can create groups here and add certain servers to a perticular group. this file is writen in INI formate
    ANSIBLE PLAYBOOK:
        This is the file where will write the tasks that we want Ansible to run/perform on the host machine and this file is writen in YAML formate. yaml language is mainly made up of key value pairs(dictionary) and lists

SETTING UP THE HOSTS:
    Ansible is agentless, meaning we do not need to set up anything on the host machine other than some form of connection to the controller machine and we will be using ssh connection in this project.

step 1.
    we spin up 4 instances on AWS using one as a controller, where are we are to install ansible and then exchange pub_key between these four servers so that they can communicate with themselves using ssh.

step 2.
   on the contoller server, we will then create a new directory for the ansible controller, lets call the foolder ansible_controller.

step 3.
    we then install ansible on the controller machine by running the following commands:
                $ sudo apt update
                $ sudo apt install software-properties-common
                $ sudo add-apt-repository --yes --update ppa:ansible/ansible
                $ sudo apt install ansible
    after which we check if ansible was properly installed by running "sudo ansible --version"

step 4.
    on our controller machine, we are going to create a directory, let call that directory "ansible-project" by runing "mkdir ansible-project
    " 
step 5.
    we then navigate into "ansible-project" and create a new file, this file is going to be our INVENTORY FILE and we are going to call it HOSTS
    so we just run this command "touch hosts" to create the file.

step 6.
    Still on that directory(ansible-jobs), we will create another file and this file will be our ANSIBLE PLAYBOOK and we will call it PLAYBOOK.YML. so we just run the command "touch playbook.yml" to create the file.

step 7.
    On the controller machine, we run the command "ssh-keygen" to generate the pub_key and then go into the folder where the keys are stored and then cat the pub_key by running "cat id_rsa.pub" and copy and past this key on the authorized_keys of the host machines then try to ssh from the controller to any of the host machine and this should be possible if done right.

step 8.
    We then go back to the controller server and cd into the ansible-project folder and open the HOSTS file to add the servers into the files using INI formate. so we will be using NANO as the text editor to open the file. Below is the sample of how the file is going to look like:

                [web_servers]
                172.31.26.237
                172.31.28.157

                [db_servers]
                172.31.26.249
    then navigate to our ansible-jobs folers and then run the command to test the connections since we have included the ips of the servers in the hosts file. so we run "ansible all -m ping -i hosts" if you do this well, you should get a success message, ping pung

step 9.
    Now that our controller can communicate/ping the host machines, we can now write our ansible playbook where we will tell ansible to install apache2 on all the host machines and start them. So again we navigate to the ansible-jobs folder and and use our nano editor to go into the playbook file where we can now write the tasks we want ansible to perform on the hosts machines

step 10.
    Now basically, playbooks are writen in yaml langusge and like I said before yaml is mainly made of dictionary and list, so the play is in dictionery and the tasks are in lists. So since we are to install apache2 on the three servers, the task is going to be broken into three stage, first is to update the vm, second is to install the apache2 via apt since we are using ubuntu and the last stage is to start the service so the playbook should look like this
- name: install apache2 on multiple servers

  hosts:
    - web_servers
    - db_servers
  become: yes

  tasks:
    - name: update apt cache
      apt:
        update_cache: yes

  tasks:
    - name: install apache2 
      apt:
        name: apache2
        state: present

  tasks:
    - name: Ensure apache2 service is running
      service:
        name: apache2
        state: started
        enabled: yes

You can use the above playbook and edit the servers you want to run apache2 on.

step 11.
    after using crl x then y then enter to close the nano editor, you can now run the playbook using the command "ansible-playbook -i hosts playbook.yml" and if everything is well configured, ansible should be able to install apache2 on all the servers and start them

step 12.
    Since we are using ubuntu on this project, we can check on the host machines to see if apache2 is running by running the command "systemctl status apache2" and this should tell us if apache2 is now running on the host machines
